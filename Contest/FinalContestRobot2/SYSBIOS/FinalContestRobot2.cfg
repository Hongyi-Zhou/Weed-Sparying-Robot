var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Cache = xdc.useModule('ti.sysbios.family.c64p.Cache');
var Timer = xdc.useModule('ti.sysbios.timers.timer64.Timer');

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x1000;

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x2000;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x200;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;

Clock.timerId = 2;
var swi0Params = new Swi.Params();
swi0Params.instance.name = "SWI_RobotControl";
swi0Params.priority = 3;
Program.global.SWI_RobotControl = Swi.create("&RobotControl", swi0Params);
var clock0Params = new Clock.Params();
clock0Params.instance.name = "CLK_addtime";
clock0Params.period = 1;
clock0Params.startFlag = true;
Program.global.CLK_addtime = Clock.create("&addtime", 1, clock0Params);
var clock1Params = new Clock.Params();
clock1Params.instance.name = "CLK_startMcBSP";
clock1Params.period = 25;
clock1Params.startFlag = true;
Program.global.CLK_startMcBSP = Clock.create("&startMcBSP", 25, clock1Params);
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "HWI8_EDMA3_0";
hwi0Params.eventId = 8;
Program.global.HWI8_EDMA3_0 = Hwi.create(8, "&EDMA3_0_ISR", hwi0Params);
var swi1Params = new Swi.Params();
swi1Params.instance.name = "SWI_LCD";
swi1Params.priority = 1;
Program.global.SWI_LCD = Swi.create("&LCD", swi1Params);
var swi2Params = new Swi.Params();
swi2Params.instance.name = "SWI_vision";
swi2Params.priority = 2;
Program.global.SWI_vision = Swi.create("&vision", swi2Params);
var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "HWI4_VPIF95";
hwi1Params.eventId = 95;
Program.global.HWI4_VPIF95 = Hwi.create(4, "&VPIF_HWI", hwi1Params);
var hwi2Params = new Hwi.Params();
hwi2Params.instance.name = "HWI7_PRU6";
hwi2Params.eventId = 6;
Program.global.HWI7_PRU6 = Hwi.create(7, "&PRU_HWI", hwi2Params);
var hwi3Params = new Hwi.Params();
hwi3Params.instance.name = "HWI5_EDMA3_1";
hwi3Params.eventId = 91;
Program.global.HWI5_EDMA3_1 = Hwi.create(5, "&EDMA3_1_ISR", hwi3Params);
var task0Params = new Task.Params();
task0Params.instance.name = "TASK_ComWithLinux";
task0Params.vitalTaskFlag = false;
task0Params.stackSize = 4192;
Program.global.TASK_ComWithLinux = Task.create("&ComWithLinux", task0Params);
var task1Params = new Task.Params();
task1Params.instance.name = "TASK_LADAR";
task1Params.vitalTaskFlag = false;
task1Params.stackSize = 4192;
Program.global.TASK_LADAR = Task.create("&LADARtask", task1Params);
BIOS.customCCOpts = "-mv6740 --abi=eabi -q -mi10 -mo -pdr -pden -pds=238 -pds=880 -pds1110  --program_level_compile -o3 -g";
Cache.MAR192_223 = 4294967295;
BIOS.runtimeCreatesEnabled = false;
BIOS.assertsEnabled = false;
BIOS.logsEnabled = false;
Timer.anyMask = 255;
Timer.intFreqs[2].lo = 132000000;
Timer.intFreqs[3].lo = 132000000;
var task2Params = new Task.Params();
task2Params.instance.name = "task2";
task2Params.stackSize = 4096;
Program.global.task2 = Task.create("&runAstar", task2Params);
var task3Params = new Task.Params();
task3Params.instance.name = "task3";
task3Params.stackSize = 4096;
Program.global.task3 = Task.create("&LinuxAstar", task3Params);
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "SEM_startAstar";
Program.global.SEM_startAstar = Semaphore.create(null, semaphore0Params);
